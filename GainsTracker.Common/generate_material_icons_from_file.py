import re
from datetime import datetime

import requests

# CDN URL for the Material Design Icons CSS file
CDN_URL = "https://cdn.jsdelivr.net/npm/@mdi/font/css/materialdesignicons.min.css"

# Output C# file for the generated enum
OUTPUT_CS_FILE = "MaterialIcons.cs"

# Regex to match valid `.mdi-*` icon definitions
ICON_REGEX = r"\.mdi-([\w-]+)::before"

generation_date = datetime.now().strftime("%Y-%m-%d")

# Template for the generated C# enum class
ENUM_TEMPLATE = f"""// Generated by generate_material_icons_from_file.py.
// The content of this file was last generated on {generation_date}.
""" + """
namespace GainsTracker.Common;

public enum Mdi
{{
{enums}
}}

"""


def fetch_css_from_url(url):
    """Fetch the CSS file from the provided URL."""
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        print(f"Failed to fetch CSS from {url}. HTTP status: {response.status_code}")
        exit(1)


def parse_icons_from_css(css_content):
    """Parse the icon names from the CSS content."""
    return re.findall(ICON_REGEX, css_content)


def generate_enum(icons):
    """Generate C# enum for the icons."""
    lines = [f'        {to_csharp_name(icon)},' for icon in icons]
    return "\n".join(lines)


def to_csharp_name(icon_name):
    """Convert icon names to PascalCase for C#."""
    parts = icon_name.split("-")
    return "".join(part.capitalize() for part in parts)


def write_output(file_path, content):
    """Write the generated content to a file."""
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(content)


if __name__ == "__main__":
    # Step 1: Fetch the CSS file from the CDN
    print(f"Fetching CSS from {CDN_URL}...")
    css_content = fetch_css_from_url(CDN_URL)

    # Step 2: Parse icons from CSS
    print("Parsing icons from CSS content...")
    icons = parse_icons_from_css(css_content)
    if not icons:
        print("No icons found. The CSS content might be invalid.")
        exit(1)

    # Step 3: Generate enum content
    print(f"Generating enum for {len(icons)} icons...")
    enums_content = ENUM_TEMPLATE.format(enums=generate_enum(icons))

    # Step 4: Write enum to the output file
    write_output(OUTPUT_CS_FILE, enums_content)
    print(f"Generated MaterialIcons.cs with {len(icons)} enums.")
