// <auto-generated />
using System;
using GainsTracker.CoreAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GainsTracker.CoreAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230716193824_AddProfileIcon")]
    partial class AddProfileIcon
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("FriendHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_handle");

                    b.Property<string>("FriendName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_name");

                    b.Property<DateTime>("FriendsSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("friends_since");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.HasKey("Id")
                        .HasName("pk_friends");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_friends_gains_account_id");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("request_time");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requester_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_friend_requests");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_friend_requests_recipient_id");

                    b.HasIndex("RequesterId")
                        .HasDatabaseName("ix_friend_requests_requester_id");

                    b.ToTable("friend_requests", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("GainsAccountId")
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<DateTime>("LoggingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("logging_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_metric");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_metric_gains_account_id");

                    b.ToTable("metric");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Metric");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("GainsAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_gains_account_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7cdaba77-5698-435a-a49d-37f22b17400e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88ecf119-bd5c-4c39-9689-3a660f3c4413",
                            Email = "stije@studiostoy.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "6cce5106-4fd0-447a-b677-6ee11628ef45",
                            LockoutEnabled = false,
                            NormalizedEmail = "STIJE@STUDIOSTOY.NL",
                            NormalizedUserName = "STIJE",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2r0sI9iGuyHTK7tLp87FHleH5MvVcvprfP1Jn71n8qnIwaf8FXFfTE7jkYscfysA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "723309d6-f441-47fa-a959-4228b53ffcea",
                            TwoFactorEnabled = false,
                            UserName = "stije"
                        },
                        new
                        {
                            Id = "c1c329af-4e50-4771-87fd-001f35ec3c4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e91bf943-225d-4bfa-8d8a-c0456899403c",
                            Email = "joy@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "6fff6f6d-16ba-4c8c-a71d-a64f2144a3b0",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOY@STUDIOSTOY.NL",
                            NormalizedUserName = "JOYO",
                            PasswordHash = "AQAAAAIAAYagAAAAECKozv8FNpfOEWh+0AITAUkPAZ9U2hXOEaKkxqJf96IZOVZLHLp5joLMsnqTuqXdWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be5d1ce5-c2b2-4923-84ca-1e4e06f73249",
                            TwoFactorEnabled = false,
                            UserName = "Joyo"
                        },
                        new
                        {
                            Id = "18d06b2a-cb1c-4c54-b0e6-5a1cb7b123f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cea24ed7-c06e-4064-8188-5401b327b32e",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "77341a86-2b20-4c70-a066-d1ff7b7990ff",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "BINO",
                            PasswordHash = "AQAAAAIAAYagAAAAECEzsZnFgew+1EruO/CLI5AACEJ1t0R+NIgnVmABD79Hgt9Lh/RnvzxHypWXn9NnDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdab6568-df7d-4b3a-b203-cb0e083ce928",
                            TwoFactorEnabled = false,
                            UserName = "BINO"
                        },
                        new
                        {
                            Id = "65a1521f-99d7-4bf6-8510-ee8fcaec6de6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c481c9b-67c0-441f-a714-8c8a36097508",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "9a86a7f5-0d13-4c73-bec7-b1ae59087cdc",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "SOEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEAw/1tHP0pkH+Tym03zWh/F4v7yNxcu5KeZ1HVGpEuPnVY+Wl10JJU2vaw37qe/iow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "125ee1d2-e098-4e57-bda6-e130bd4e7e3a",
                            TwoFactorEnabled = false,
                            UserName = "soep"
                        },
                        new
                        {
                            Id = "efca1417-7e50-47d1-bf03-cf8acc5415dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d598745-f93f-4836-8f44-aef7fc061ebd",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "5c482f39-5911-4abf-a5f5-826f17c9cda4",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "EEF",
                            PasswordHash = "AQAAAAIAAYagAAAAEDDZVbDWMXEQBDoe6OzLLAs8wICxj2xS9WjX1tIKH8sDu3oJD96gwRXRrbH6UdVE8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69ef7869-5f36-4320-ad96-aedc3987bd46",
                            TwoFactorEnabled = false,
                            UserName = "eef"
                        },
                        new
                        {
                            Id = "3a1d08b2-be9a-4261-8ade-82d49301f14f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fabd25e9-8807-40fa-8d6c-355c0ce44e6d",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "519d4666-5970-45cf-980f-0f9b1f8af9ac",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "JORDT",
                            PasswordHash = "AQAAAAIAAYagAAAAEElQCA0XX2joBKpH67d0rtL5QBa/l1ggaRGJ+n9dR4y2z1VD2SQL/KqBmYgYJDUJyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "786fb9c8-9334-4342-ba7e-a378f3a82a12",
                            TwoFactorEnabled = false,
                            UserName = "jordt"
                        },
                        new
                        {
                            Id = "fde50d27-8bee-4c28-ae39-2031fa419887",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee454bb2-71d2-4652-9462-89ea123c2b1e",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "e47170f3-fb8c-4839-bae2-0d454503969c",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "SANDA",
                            PasswordHash = "AQAAAAIAAYagAAAAEGSR9qu/8mmN2yZaCk+3qgiwJT3XLABnv2DBJQ++t1dtQKvwOBqYylg9kg51k+YXhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a3716a4-c9ab-4760-98c7-110b5111fdea",
                            TwoFactorEnabled = false,
                            UserName = "sanda"
                        },
                        new
                        {
                            Id = "1a33810f-d52a-46d4-90e5-0256090b4ea6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "025fd822-20a3-40ba-86ad-29ec833b9922",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "c39979f6-d371-414e-9fcf-c09a34ee7b5a",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "NAOH",
                            PasswordHash = "AQAAAAIAAYagAAAAEGe/BspyoCKSDIIunfoU20d31aFwOJGROjwxCzLl8qsN1Vlt+o8fLuKil+PoZFGnPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5afd354f-f701-4074-99b6-c6c6c10d3a7a",
                            TwoFactorEnabled = false,
                            UserName = "naoh"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.ProfileIcon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("PictureColor")
                        .HasColumnType("integer")
                        .HasColumnName("picture_color");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_profile_icons");

                    b.ToTable("profile_icons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8814e727-5c38-42cb-909f-6ac13d874516",
                            PictureColor = -14454291,
                            Url = "",
                            UserProfileId = "cd62bad2-15a7-4996-a6fe-0fd236cd31a6"
                        },
                        new
                        {
                            Id = "de2ba1e5-986d-47ee-ab30-f268046366a6",
                            PictureColor = -9828115,
                            Url = "",
                            UserProfileId = "d90d6e12-1e56-48fb-be88-5bf2cda65e41"
                        },
                        new
                        {
                            Id = "55adb557-ed2f-42da-82bc-252da274373d",
                            PictureColor = -1838495,
                            Url = "",
                            UserProfileId = "22984b05-9691-4344-b07b-67113fa4a1ef"
                        },
                        new
                        {
                            Id = "deee57b1-5269-4f84-95d4-bff3dac8ef9c",
                            PictureColor = -14002828,
                            Url = "",
                            UserProfileId = "0fc81a59-ffdf-478c-9339-a8879fedc3b4"
                        },
                        new
                        {
                            Id = "7643ac90-b0c8-44d7-824c-612097429e4e",
                            PictureColor = -6881424,
                            Url = "",
                            UserProfileId = "70bda109-efdb-4934-a217-ae06a55b6b10"
                        },
                        new
                        {
                            Id = "fa1da36c-040c-413e-b9a2-25f73348fbaf",
                            PictureColor = -13405742,
                            Url = "",
                            UserProfileId = "543d520d-769f-4cd6-8393-e21a8b1c167f"
                        },
                        new
                        {
                            Id = "b82f06a1-7e11-4e68-8a5f-ec21ec5a8b91",
                            PictureColor = -8144901,
                            Url = "",
                            UserProfileId = "a64a32ed-bb67-404a-a253-471196921f96"
                        },
                        new
                        {
                            Id = "509f8d48-2cad-443e-8728-a649413b4c99",
                            PictureColor = -8683815,
                            Url = "",
                            UserProfileId = "39c5dbe4-d40e-482a-9577-ffabf1aaece2"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("IconId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_id");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.HasIndex("IconId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_profiles_icon_id");

                    b.ToTable("user_profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cd62bad2-15a7-4996-a6fe-0fd236cd31a6",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "6cce5106-4fd0-447a-b677-6ee11628ef45",
                            IconId = "8814e727-5c38-42cb-909f-6ac13d874516"
                        },
                        new
                        {
                            Id = "d90d6e12-1e56-48fb-be88-5bf2cda65e41",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "6fff6f6d-16ba-4c8c-a71d-a64f2144a3b0",
                            IconId = "de2ba1e5-986d-47ee-ab30-f268046366a6"
                        },
                        new
                        {
                            Id = "22984b05-9691-4344-b07b-67113fa4a1ef",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "77341a86-2b20-4c70-a066-d1ff7b7990ff",
                            IconId = "55adb557-ed2f-42da-82bc-252da274373d"
                        },
                        new
                        {
                            Id = "0fc81a59-ffdf-478c-9339-a8879fedc3b4",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "9a86a7f5-0d13-4c73-bec7-b1ae59087cdc",
                            IconId = "deee57b1-5269-4f84-95d4-bff3dac8ef9c"
                        },
                        new
                        {
                            Id = "70bda109-efdb-4934-a217-ae06a55b6b10",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "5c482f39-5911-4abf-a5f5-826f17c9cda4",
                            IconId = "7643ac90-b0c8-44d7-824c-612097429e4e"
                        },
                        new
                        {
                            Id = "543d520d-769f-4cd6-8393-e21a8b1c167f",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "519d4666-5970-45cf-980f-0f9b1f8af9ac",
                            IconId = "fa1da36c-040c-413e-b9a2-25f73348fbaf"
                        },
                        new
                        {
                            Id = "a64a32ed-bb67-404a-a253-471196921f96",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "e47170f3-fb8c-4839-bae2-0d454503969c",
                            IconId = "b82f06a1-7e11-4e68-8a5f-ec21ec5a8b91"
                        },
                        new
                        {
                            Id = "39c5dbe4-d40e-482a-9577-ffabf1aaece2",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "c39979f6-d371-414e-9fcf-c09a34ee7b5a",
                            IconId = "509f8d48-2cad-443e-8728-a649413b4c99"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("UserHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_handle");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_gains_accounts");

                    b.HasIndex("UserProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_gains_accounts_user_profile_id");

                    b.ToTable("gains_accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6cce5106-4fd0-447a-b677-6ee11628ef45",
                            UserHandle = "stije",
                            UserId = "7cdaba77-5698-435a-a49d-37f22b17400e",
                            UserProfileId = "cd62bad2-15a7-4996-a6fe-0fd236cd31a6"
                        },
                        new
                        {
                            Id = "6fff6f6d-16ba-4c8c-a71d-a64f2144a3b0",
                            UserHandle = "Joyo",
                            UserId = "c1c329af-4e50-4771-87fd-001f35ec3c4c",
                            UserProfileId = "d90d6e12-1e56-48fb-be88-5bf2cda65e41"
                        },
                        new
                        {
                            Id = "77341a86-2b20-4c70-a066-d1ff7b7990ff",
                            UserHandle = "BINO",
                            UserId = "18d06b2a-cb1c-4c54-b0e6-5a1cb7b123f3",
                            UserProfileId = "22984b05-9691-4344-b07b-67113fa4a1ef"
                        },
                        new
                        {
                            Id = "9a86a7f5-0d13-4c73-bec7-b1ae59087cdc",
                            UserHandle = "soep",
                            UserId = "65a1521f-99d7-4bf6-8510-ee8fcaec6de6",
                            UserProfileId = "0fc81a59-ffdf-478c-9339-a8879fedc3b4"
                        },
                        new
                        {
                            Id = "5c482f39-5911-4abf-a5f5-826f17c9cda4",
                            UserHandle = "eef",
                            UserId = "efca1417-7e50-47d1-bf03-cf8acc5415dc",
                            UserProfileId = "70bda109-efdb-4934-a217-ae06a55b6b10"
                        },
                        new
                        {
                            Id = "519d4666-5970-45cf-980f-0f9b1f8af9ac",
                            UserHandle = "jordt",
                            UserId = "3a1d08b2-be9a-4261-8ade-82d49301f14f",
                            UserProfileId = "543d520d-769f-4cd6-8393-e21a8b1c167f"
                        },
                        new
                        {
                            Id = "e47170f3-fb8c-4839-bae2-0d454503969c",
                            UserHandle = "sanda",
                            UserId = "fde50d27-8bee-4c28-ae39-2031fa419887",
                            UserProfileId = "a64a32ed-bb67-404a-a253-471196921f96"
                        },
                        new
                        {
                            Id = "c39979f6-d371-414e-9fcf-c09a34ee7b5a",
                            UserHandle = "naoh",
                            UserId = "1a33810f-d52a-46d4-90e5-0256090b4ea6",
                            UserProfileId = "39c5dbe4-d40e-482a-9577-ffabf1aaece2"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("TimeOfRecord")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_of_record");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.Property<string>("WorkoutId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workout_id");

                    b.HasKey("Id")
                        .HasName("pk_measurement");

                    b.HasIndex("UserProfileId")
                        .HasDatabaseName("ix_measurement_user_profile_id");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_measurement_workout_id");

                    b.ToTable("measurement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Measurement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BestMeasurementId")
                        .HasColumnType("text")
                        .HasColumnName("best_measurement_id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_workout");

                    b.HasIndex("BestMeasurementId")
                        .HasDatabaseName("ix_workout_best_measurement_id");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_workout_gains_account_id");

                    b.ToTable("workout", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.LiterWaterMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<double>("Liters")
                        .HasColumnType("double precision")
                        .HasColumnName("liters");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("LiterWaterMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.ProteinMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("ProteinIntake")
                        .HasColumnType("bigint")
                        .HasColumnName("protein_intake");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("ProteinMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.WeightMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint")
                        .HasColumnName("weight");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("WeightMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.GeneralMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("GeneralAchievement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("general_achievement");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("GeneralMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.RepsMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("RepsMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.StrengthMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("weight_unit");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Reps")
                                .HasColumnName("strength_measurement_reps");
                        });

                    b.HasDiscriminator().HasValue("StrengthMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeAndDistanceEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<string>("DistanceUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("distance_unit");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("TimeAndDistanceEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Time")
                                .HasColumnName("time_endurance_measurement_time");
                        });

                    b.HasDiscriminator().HasValue("TimeEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Friends")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friends_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Recipient")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_recipient_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_requester_id");

                    b.Navigation("Recipient");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Metrics")
                        .HasForeignKey("GainsAccountId")
                        .HasConstraintName("fk_metric_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "GainsAccount")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Security.Models.User", "GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_gains_accounts_gains_account_id");

                    b.Navigation("GainsAccount");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.ProfileIcon", "Icon")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", "IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profiles_profile_icons_icon_id1");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", "UserProfile")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gains_accounts_user_profiles_user_profile_id1");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", null)
                        .WithMany("PinnedPBs")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_user_profiles_user_profile_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", null)
                        .WithMany("Measurements")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_workout_workout_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", "PersonalBest")
                        .WithMany()
                        .HasForeignKey("BestMeasurementId")
                        .HasConstraintName("fk_workout_measurement_best_measurement_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Workouts")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_gains_accounts_gains_account_id");

                    b.Navigation("PersonalBest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Navigation("PinnedPBs");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Metrics");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
