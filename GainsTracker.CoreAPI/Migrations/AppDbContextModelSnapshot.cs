// <auto-generated />
using System;
using GainsTracker.CoreAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GainsTracker.CoreAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("FriendHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_handle");

                    b.Property<string>("FriendName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_name");

                    b.Property<DateTime>("FriendsSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("friends_since");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.HasKey("Id")
                        .HasName("pk_friends");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_friends_gains_account_id");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("request_time");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requester_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_friend_requests");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_friend_requests_recipient_id");

                    b.HasIndex("RequesterId")
                        .HasDatabaseName("ix_friend_requests_requester_id");

                    b.ToTable("friend_requests", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("GainsAccountId")
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<DateTime>("LoggingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("logging_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_metric");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_metric_gains_account_id");

                    b.ToTable("metric");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Metric");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("GainsAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_gains_account_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "39e1e8e9-cf52-43cf-b36d-6e236781fdf7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "484087b0-47b7-4f47-8d6a-b42a34dd5f63",
                            Email = "stije@studiostoy.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "e89d2092-2bb5-450e-a421-3708f8306d0c",
                            LockoutEnabled = false,
                            NormalizedEmail = "STIJE@STUDIOSTOY.NL",
                            NormalizedUserName = "STIJE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFgwS7CJlhBI/QGk852qGLmmSD0/wlKgqtUlk8PwaiRU/h39RB5pdA1Zkg/CeoGVsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "079e0735-8857-41ef-a8b1-1fbb5cb976a6",
                            TwoFactorEnabled = false,
                            UserName = "stije"
                        },
                        new
                        {
                            Id = "bef5387a-2d5d-4cbd-9e87-e8b4ba85220a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a6bfa02-b984-4eb1-a574-9376dc145acd",
                            Email = "joyo@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "a62bda19-021b-40bd-9cf4-25be19aa43d1",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOYO@GAINSTRACKER.NL",
                            NormalizedUserName = "JOYO",
                            PasswordHash = "AQAAAAIAAYagAAAAEBCRK0DXBDyoHBTHUCNUEvoE+l8FbjSjFr6WwBg73h84kOyE4uZCGA+VfzGITTGXdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74ed3f9a-af82-4861-8c20-9dc78ca7c4bf",
                            TwoFactorEnabled = false,
                            UserName = "joyo"
                        },
                        new
                        {
                            Id = "ca246d77-91c3-4b9b-b309-652aa4b0781b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b979e94-3e25-491d-b5c0-755430bb68dc",
                            Email = "bino@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "08a458ec-2d03-4b24-b7df-3e37758ba558",
                            LockoutEnabled = false,
                            NormalizedEmail = "BINO@GAINSTRACKER.NL",
                            NormalizedUserName = "BINO",
                            PasswordHash = "AQAAAAIAAYagAAAAENgjXcc9a8vxaxPG3ITnPx7iux64u8jvfUksj1tnBTFTvCpaOpVG9IOYNJnf7sHgZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ba688cd-f8a3-4ab9-91f0-2132370b801d",
                            TwoFactorEnabled = false,
                            UserName = "bino"
                        },
                        new
                        {
                            Id = "85c64060-ebc1-4018-adea-851d60cf9ab5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee62945c-e6b8-4f36-994d-fb724ff05d64",
                            Email = "soep@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "69b15a32-3435-40a9-9c27-f07757194ca7",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOEP@GAINSTRACKER.NL",
                            NormalizedUserName = "SOEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEOa6gc+794FgLGjPRFWreK4jIFsAU2KdwCfXrHnHx5k+OY8uGVeXA9Z1YJHt6rr5cA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b259b2c0-157c-4bce-a190-a1e796da5355",
                            TwoFactorEnabled = false,
                            UserName = "soep"
                        },
                        new
                        {
                            Id = "46e5fe55-7f52-44b1-b6a7-8c73ccf90fd8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39e63650-0fdd-4bb8-8edf-1175f674e340",
                            Email = "eef@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "d035ed6f-89dd-4649-8c1c-495faf5ca40e",
                            LockoutEnabled = false,
                            NormalizedEmail = "EEF@GAINSTRACKER.NL",
                            NormalizedUserName = "EEF",
                            PasswordHash = "AQAAAAIAAYagAAAAEEYv+GtnWsIqYCV7T14izbhzHs9uUERL9CKdQCma8Ds3j5MYWI5YWU6lFBjfox7ZGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6120ec5-ad2c-418f-99b2-c7b4a23f0848",
                            TwoFactorEnabled = false,
                            UserName = "eef"
                        },
                        new
                        {
                            Id = "7786cd53-fe22-4759-96bd-6dd54f39e314",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71b3a2e5-41cc-43c4-826a-373ae340e406",
                            Email = "jordt@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "8c46367d-5a76-49e6-90f9-0a4d340e3b9d",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORDT@GAINSTRACKER.NL",
                            NormalizedUserName = "JORDT",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4TzlWFH07frZNCcBmH9gkrhyh69U2hmPe1x9lS5FBFwX8YJAiojHxduarv4bXFpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1e74c19-4a82-4397-9bbb-829ed1e960b2",
                            TwoFactorEnabled = false,
                            UserName = "jordt"
                        },
                        new
                        {
                            Id = "45af9e1d-918d-4bac-91be-5a3dafd3632c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb8f135e-6a66-4c3d-b1de-69d505fd823c",
                            Email = "sanda@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "ce467f81-649d-4137-ba49-94196cc87c28",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDA@GAINSTRACKER.NL",
                            NormalizedUserName = "SANDA",
                            PasswordHash = "AQAAAAIAAYagAAAAEAwqWgs9q6UqiRnkzebxBoqIkWQWIaFyMuTo08zKraxTXmBQ5i7iEA+f9Js+0VhvLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cf64b81-e1b6-4dd0-bf4f-e56c379c59ff",
                            TwoFactorEnabled = false,
                            UserName = "sanda"
                        },
                        new
                        {
                            Id = "a2293bab-21af-4a81-845f-24fb512d6570",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f19ebe67-bc53-408c-ba6c-5904fba5e6ba",
                            Email = "naoh@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "324333e7-7b11-49ac-bef1-34d1a1c6a1a2",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAOH@GAINSTRACKER.NL",
                            NormalizedUserName = "NAOH",
                            PasswordHash = "AQAAAAIAAYagAAAAEDTwmX8mZXzyA+4p9km9/NuAh4l5biHvv7jf0scHADJnPaKhn0EWWxW6bKFhmffeAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "543b4c81-0e28-433f-8b4c-2a0fb396f052",
                            TwoFactorEnabled = false,
                            UserName = "naoh"
                        },
                        new
                        {
                            Id = "1121bbb9-d84a-4785-a82d-cc8524e05ded",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a22fe884-b01d-4c1a-a42d-28606fd35adc",
                            Email = "dyllo@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "425c6cc9-0ec6-4f26-8181-b5d88dcd7a83",
                            LockoutEnabled = false,
                            NormalizedEmail = "DYLLO@GAINSTRACKER.NL",
                            NormalizedUserName = "DYLLO",
                            PasswordHash = "AQAAAAIAAYagAAAAEBTXV5xAWwn5tU+7ijReNJtH/i5t4yfynZeH971+H5md76xWcfTMUovpb0tlb0enKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f74ea4b7-6dfb-4623-bec0-23cafa45b524",
                            TwoFactorEnabled = false,
                            UserName = "dyllo"
                        },
                        new
                        {
                            Id = "52838699-5ea6-48ad-a0d8-c04863f8ae69",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae898818-17d4-4399-9215-093507170a02",
                            Email = "arv@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "64a8f4dd-2fc0-4df4-98ce-778f5400a228",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARV@GAINSTRACKER.NL",
                            NormalizedUserName = "ARV",
                            PasswordHash = "AQAAAAIAAYagAAAAEIp3D9giPC7/ks9LK5FLgpwt1p9owZ8LTjthpBLOIg0rbBROUwn6DxbCMrXJGv8wBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc4a96a9-8a01-4b98-a1bf-c9c325637747",
                            TwoFactorEnabled = false,
                            UserName = "arv"
                        },
                        new
                        {
                            Id = "8c6ddacf-85fc-4592-aa30-b2094e2ede57",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95b7db6b-3b49-4c58-85a3-d2337e0078cd",
                            Email = "japser@gainstracker.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "5b20ae1d-5d24-46ac-ba22-c17a98b7bea6",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAPSER@GAINSTRACKER.NL",
                            NormalizedUserName = "JAPSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAv5lLjm+hD6/Iq5Q87LY2men7qWMTG5W5UY/C6Y9W13WR/Dsf7KEBikUCDFjELstQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ac532de-78cd-4fdb-931c-ca96367e0e3f",
                            TwoFactorEnabled = false,
                            UserName = "japser"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.ProfileIcon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("PictureColor")
                        .HasColumnType("integer")
                        .HasColumnName("picture_color");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_profile_icons");

                    b.HasIndex("UserProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_profile_icons_user_profile_id");

                    b.ToTable("profile_icons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fc20ac78-1171-4498-a2fc-a050c7d8c755",
                            PictureColor = -14655722,
                            Url = "",
                            UserProfileId = "63fda16d-8aff-45d5-a241-91ce02a78240"
                        },
                        new
                        {
                            Id = "e7dcb8f2-d2d1-4c59-9907-4fe7ad00d3b4",
                            PictureColor = -9672630,
                            Url = "",
                            UserProfileId = "93701009-7bc3-49a0-9ca3-5b04eb13bd36"
                        },
                        new
                        {
                            Id = "3eb74cb9-bb32-46af-9585-d83c87266290",
                            PictureColor = -3234621,
                            Url = "",
                            UserProfileId = "f8b589bd-b91a-4704-9371-73b94b07319f"
                        },
                        new
                        {
                            Id = "f95493bf-b281-419c-9ab0-3329de898c70",
                            PictureColor = -6386155,
                            Url = "",
                            UserProfileId = "5d8d530c-284f-430e-92a7-f4ec84cf0550"
                        },
                        new
                        {
                            Id = "72d8301a-5cb4-43e3-b2b4-b39b0cd99e25",
                            PictureColor = -3963880,
                            Url = "",
                            UserProfileId = "b06572a6-8128-4024-bf6f-3cc7e1c456f2"
                        },
                        new
                        {
                            Id = "9f56933b-82ed-40fa-aecb-e540d9b52d0e",
                            PictureColor = -5299264,
                            Url = "",
                            UserProfileId = "9a6cce86-4e44-4087-b09a-e66a35fdc128"
                        },
                        new
                        {
                            Id = "51bd0982-c371-4ff3-8ab3-346559f94512",
                            PictureColor = -11446385,
                            Url = "",
                            UserProfileId = "44bd9c73-fc6e-4749-a0a2-4f8479e33996"
                        },
                        new
                        {
                            Id = "8aa9b0a7-d13f-4001-9a98-a3042b6e3628",
                            PictureColor = -10101145,
                            Url = "",
                            UserProfileId = "7f154b7f-bb4c-4125-88bb-14f358e242d3"
                        },
                        new
                        {
                            Id = "fe1657d3-3cfb-4cc4-b84c-aaed8c9baefb",
                            PictureColor = -2188640,
                            Url = "",
                            UserProfileId = "4866c9a8-4214-400f-a619-b77fd231afef"
                        },
                        new
                        {
                            Id = "5fbbf621-204c-45fc-b0ad-57d1273e1002",
                            PictureColor = -10057921,
                            Url = "",
                            UserProfileId = "143eccc3-ff5e-4c46-9d59-c0e411b2410b"
                        },
                        new
                        {
                            Id = "7be89c4e-7961-405c-8ca1-dd8bee491bbc",
                            PictureColor = -8387499,
                            Url = "",
                            UserProfileId = "a43419bd-bbee-4c58-9766-4739837354cd"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.ToTable("user_profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "63fda16d-8aff-45d5-a241-91ce02a78240",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "e89d2092-2bb5-450e-a421-3708f8306d0c"
                        },
                        new
                        {
                            Id = "93701009-7bc3-49a0-9ca3-5b04eb13bd36",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "a62bda19-021b-40bd-9cf4-25be19aa43d1"
                        },
                        new
                        {
                            Id = "f8b589bd-b91a-4704-9371-73b94b07319f",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "08a458ec-2d03-4b24-b7df-3e37758ba558"
                        },
                        new
                        {
                            Id = "5d8d530c-284f-430e-92a7-f4ec84cf0550",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "69b15a32-3435-40a9-9c27-f07757194ca7"
                        },
                        new
                        {
                            Id = "b06572a6-8128-4024-bf6f-3cc7e1c456f2",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "d035ed6f-89dd-4649-8c1c-495faf5ca40e"
                        },
                        new
                        {
                            Id = "9a6cce86-4e44-4087-b09a-e66a35fdc128",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "8c46367d-5a76-49e6-90f9-0a4d340e3b9d"
                        },
                        new
                        {
                            Id = "44bd9c73-fc6e-4749-a0a2-4f8479e33996",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "ce467f81-649d-4137-ba49-94196cc87c28"
                        },
                        new
                        {
                            Id = "7f154b7f-bb4c-4125-88bb-14f358e242d3",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "324333e7-7b11-49ac-bef1-34d1a1c6a1a2"
                        },
                        new
                        {
                            Id = "4866c9a8-4214-400f-a619-b77fd231afef",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "425c6cc9-0ec6-4f26-8181-b5d88dcd7a83"
                        },
                        new
                        {
                            Id = "143eccc3-ff5e-4c46-9d59-c0e411b2410b",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "64a8f4dd-2fc0-4df4-98ce-778f5400a228"
                        },
                        new
                        {
                            Id = "a43419bd-bbee-4c58-9766-4739837354cd",
                            Description = "",
                            DisplayName = "",
                            GainsAccountId = "5b20ae1d-5d24-46ac-ba22-c17a98b7bea6"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("UserHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_handle");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_gains_accounts");

                    b.HasIndex("UserProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_gains_accounts_user_profile_id");

                    b.ToTable("gains_accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e89d2092-2bb5-450e-a421-3708f8306d0c",
                            UserHandle = "stije",
                            UserId = "39e1e8e9-cf52-43cf-b36d-6e236781fdf7",
                            UserProfileId = "63fda16d-8aff-45d5-a241-91ce02a78240"
                        },
                        new
                        {
                            Id = "a62bda19-021b-40bd-9cf4-25be19aa43d1",
                            UserHandle = "joyo",
                            UserId = "bef5387a-2d5d-4cbd-9e87-e8b4ba85220a",
                            UserProfileId = "93701009-7bc3-49a0-9ca3-5b04eb13bd36"
                        },
                        new
                        {
                            Id = "08a458ec-2d03-4b24-b7df-3e37758ba558",
                            UserHandle = "bino",
                            UserId = "ca246d77-91c3-4b9b-b309-652aa4b0781b",
                            UserProfileId = "f8b589bd-b91a-4704-9371-73b94b07319f"
                        },
                        new
                        {
                            Id = "69b15a32-3435-40a9-9c27-f07757194ca7",
                            UserHandle = "soep",
                            UserId = "85c64060-ebc1-4018-adea-851d60cf9ab5",
                            UserProfileId = "5d8d530c-284f-430e-92a7-f4ec84cf0550"
                        },
                        new
                        {
                            Id = "d035ed6f-89dd-4649-8c1c-495faf5ca40e",
                            UserHandle = "eef",
                            UserId = "46e5fe55-7f52-44b1-b6a7-8c73ccf90fd8",
                            UserProfileId = "b06572a6-8128-4024-bf6f-3cc7e1c456f2"
                        },
                        new
                        {
                            Id = "8c46367d-5a76-49e6-90f9-0a4d340e3b9d",
                            UserHandle = "jordt",
                            UserId = "7786cd53-fe22-4759-96bd-6dd54f39e314",
                            UserProfileId = "9a6cce86-4e44-4087-b09a-e66a35fdc128"
                        },
                        new
                        {
                            Id = "ce467f81-649d-4137-ba49-94196cc87c28",
                            UserHandle = "sanda",
                            UserId = "45af9e1d-918d-4bac-91be-5a3dafd3632c",
                            UserProfileId = "44bd9c73-fc6e-4749-a0a2-4f8479e33996"
                        },
                        new
                        {
                            Id = "324333e7-7b11-49ac-bef1-34d1a1c6a1a2",
                            UserHandle = "naoh",
                            UserId = "a2293bab-21af-4a81-845f-24fb512d6570",
                            UserProfileId = "7f154b7f-bb4c-4125-88bb-14f358e242d3"
                        },
                        new
                        {
                            Id = "425c6cc9-0ec6-4f26-8181-b5d88dcd7a83",
                            UserHandle = "dyllo",
                            UserId = "1121bbb9-d84a-4785-a82d-cc8524e05ded",
                            UserProfileId = "4866c9a8-4214-400f-a619-b77fd231afef"
                        },
                        new
                        {
                            Id = "64a8f4dd-2fc0-4df4-98ce-778f5400a228",
                            UserHandle = "arv",
                            UserId = "52838699-5ea6-48ad-a0d8-c04863f8ae69",
                            UserProfileId = "143eccc3-ff5e-4c46-9d59-c0e411b2410b"
                        },
                        new
                        {
                            Id = "5b20ae1d-5d24-46ac-ba22-c17a98b7bea6",
                            UserHandle = "japser",
                            UserId = "8c6ddacf-85fc-4592-aa30-b2094e2ede57",
                            UserProfileId = "a43419bd-bbee-4c58-9766-4739837354cd"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("TimeOfRecord")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_of_record");

                    b.Property<string>("UserProfileId")
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.Property<string>("WorkoutId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workout_id");

                    b.HasKey("Id")
                        .HasName("pk_measurement");

                    b.HasIndex("UserProfileId")
                        .HasDatabaseName("ix_measurement_user_profile_id");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_measurement_workout_id");

                    b.ToTable("measurement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Measurement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BestMeasurementId")
                        .HasColumnType("text")
                        .HasColumnName("best_measurement_id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_workout");

                    b.HasIndex("BestMeasurementId")
                        .HasDatabaseName("ix_workout_best_measurement_id");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_workout_gains_account_id");

                    b.ToTable("workout", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.LiterWaterMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<double>("Liters")
                        .HasColumnType("double precision")
                        .HasColumnName("liters");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("LiterWaterMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.ProteinMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("ProteinIntake")
                        .HasColumnType("bigint")
                        .HasColumnName("protein_intake");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("ProteinMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.WeightMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint")
                        .HasColumnName("weight");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("WeightMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.GeneralMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("GeneralAchievement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("general_achievement");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("GeneralMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.RepsMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("RepsMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.StrengthMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("weight_unit");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Reps")
                                .HasColumnName("strength_measurement_reps");
                        });

                    b.HasDiscriminator().HasValue("StrengthMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeAndDistanceEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<string>("DistanceUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("distance_unit");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("TimeAndDistanceEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Time")
                                .HasColumnName("time_endurance_measurement_time");
                        });

                    b.HasDiscriminator().HasValue("TimeEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Friends")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friends_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Recipient")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_recipient_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_requester_id");

                    b.Navigation("Recipient");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Metrics")
                        .HasForeignKey("GainsAccountId")
                        .HasConstraintName("fk_metric_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "GainsAccount")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Security.Models.User", "GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_gains_accounts_gains_account_id");

                    b.Navigation("GainsAccount");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.ProfileIcon", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", null)
                        .WithOne("Icon")
                        .HasForeignKey("GainsTracker.CoreAPI.Components.UserProfiles.Models.ProfileIcon", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_icons_user_profiles_user_profile_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", "UserProfile")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gains_accounts_user_profiles_user_profile_id1");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", null)
                        .WithMany("PinnedPBs")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("fk_measurement_user_profiles_user_profile_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", null)
                        .WithMany("Measurements")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_workout_workout_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", "PersonalBest")
                        .WithMany()
                        .HasForeignKey("BestMeasurementId")
                        .HasConstraintName("fk_workout_measurement_best_measurement_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Workouts")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_gains_accounts_gains_account_id");

                    b.Navigation("PersonalBest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Navigation("Icon")
                        .IsRequired();

                    b.Navigation("PinnedPBs");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Metrics");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
