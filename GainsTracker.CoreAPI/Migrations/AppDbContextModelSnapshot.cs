// <auto-generated />
using System;
using GainsTracker.CoreAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GainsTracker.CoreAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("FriendHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_handle");

                    b.Property<string>("FriendName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_name");

                    b.Property<DateTime>("FriendsSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("friends_since");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.HasKey("Id")
                        .HasName("pk_friends");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_friends_gains_account_id");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("request_time");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requester_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_friend_requests");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_friend_requests_recipient_id");

                    b.HasIndex("RequesterId")
                        .HasDatabaseName("ix_friend_requests_requester_id");

                    b.ToTable("friend_requests", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("GainsAccountId")
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<DateTime>("LoggingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("logging_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_metric");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_metric_gains_account_id");

                    b.ToTable("metric");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Metric");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("GainsAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_gains_account_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bc15522d-ea20-47d3-954d-4639a8ad63a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b58eecb-298d-4480-8b37-01d65f5efde3",
                            Email = "stije@studiostoy.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "cddf167b-e989-4d8b-bd5c-1e6a55aa19fb",
                            LockoutEnabled = false,
                            NormalizedEmail = "STIJE@STUDIOSTOY.NL",
                            NormalizedUserName = "STIJE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPsLY/qdFMZzF8sF2gc2Kz90bqhlkM0wPW7uyp3G6L+t2Q6UmnI/iUc2TlgGBsq4Vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22a5794c-1fda-45bb-b4aa-e0cfe4212ff8",
                            TwoFactorEnabled = false,
                            UserName = "stije"
                        },
                        new
                        {
                            Id = "931c47b5-2378-42a6-8154-5e6a1add3907",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eebb7faa-2812-4da6-9b9a-f45edbec01c9",
                            Email = "joy@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "b2996ab3-a532-4cd9-8cc0-674df3e525e7",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOY@STUDIOSTOY.NL",
                            NormalizedUserName = "JOYO",
                            PasswordHash = "AQAAAAIAAYagAAAAEIgthvIy9xpT65Ds+e45qUgGxu/Cq1oMt0AHI6SnK8o+W/etEXwH/cvdPbWjiq3GKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3dab4756-7d5f-4a2f-8cb8-8d83896a22ed",
                            TwoFactorEnabled = false,
                            UserName = "Joyo"
                        },
                        new
                        {
                            Id = "cb66ef76-1a61-4ce5-ba87-e125b31ff0a6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5800a7f7-6bfe-46cb-bfb1-9519d87cf824",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "3ac56558-fa6e-4dbb-a203-0d3e818d3f24",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "BINO",
                            PasswordHash = "AQAAAAIAAYagAAAAEELxBDdU6yQGqoGRaL7Ngd8TxSmuoXVQOakWOfyf4hxZ46y7Rz1B1iR4aoBCWwZzeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1b04692-99f5-4e9c-863a-35ba94832659",
                            TwoFactorEnabled = false,
                            UserName = "BINO"
                        },
                        new
                        {
                            Id = "4f32b8a2-2753-4f1b-8627-2f774aa5acfe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49af0184-e854-4f2e-8479-caed2d46545c",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "002e7ade-0412-4b92-b736-3bd3c20b1c7f",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "SOEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEByTfskzdMIWgqQGDHTu1hiXE2YxhTVMKBBI6+2vWNswegsUQ3y1H6LT2K/8FT204w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b1ad46a-beab-4d84-9a0d-692eb6bf1f4f",
                            TwoFactorEnabled = false,
                            UserName = "soep"
                        },
                        new
                        {
                            Id = "8084614b-10da-4fe8-8a34-e9cb2c6cff38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90ddafe6-111c-4884-a1c5-cd75423eb9db",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "ec78f54c-5ec3-47de-b87e-f463ca6e7a60",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "EEF",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFuc4yqv4QD7oQ/KFiLkaIUoODUXz2MvPcDMmdp6TyxlVWHLBtJXJcCdNKSfAcgpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1db0c8c0-fd7f-4b47-ae4e-aa43d3c7bb88",
                            TwoFactorEnabled = false,
                            UserName = "eef"
                        },
                        new
                        {
                            Id = "c3b64cba-b0ef-44c7-af1e-22624fdb20ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eadd0cfb-94f9-4e5a-83c5-dcf3ebc7c9ab",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "e07e2bfa-9395-4d2c-8a1f-807cbe2ff361",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "JORDT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMyCZTxeT2iisMTiCl9w2q5KQt+GE+CTYVe/ygRkYGYzaRrSGMRjnBOkoFUgVABhEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "507dd6a3-dcea-40e4-aca7-574ff78f073c",
                            TwoFactorEnabled = false,
                            UserName = "jordt"
                        },
                        new
                        {
                            Id = "f67708e4-07de-499b-8167-a668d79de1f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "169ff8d6-561c-4124-ba45-39fee6fcc4da",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "0f7cc709-5823-42ed-b708-d47ee2add916",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "SANDA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDN2MBrPxR06cmx7P8Bavn1mRVVGzxDY8yDmeLz+YcYugsHZ0SYLFP8qWs0JYqZixQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da00a40e-357f-4270-a36e-2e990c3909fa",
                            TwoFactorEnabled = false,
                            UserName = "sanda"
                        },
                        new
                        {
                            Id = "699f2dc7-80fd-4492-b384-3353ea3ff215",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e767fd9b-df31-4ae6-beca-68a7a437891c",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "47769e5f-0e37-4cfa-a53e-0462887e691d",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "NAOH",
                            PasswordHash = "AQAAAAIAAYagAAAAELokn2vtx1pl1wUZYm/Dcuz5qfh/xO+o2ivOP7uZk3oY625EUDkVY9zA4PjNttWZgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acbe0fc0-accc-4be8-8b03-e5797fef0a24",
                            TwoFactorEnabled = false,
                            UserName = "naoh"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("picture_url");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.ToTable("user_profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5b340191-266e-4aed-98fc-175d938419ae",
                            Description = "",
                            GainsAccountId = "cddf167b-e989-4d8b-bd5c-1e6a55aa19fb",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "93991ba1-47f5-4af8-8319-fb181ccbe0ba",
                            Description = "",
                            GainsAccountId = "b2996ab3-a532-4cd9-8cc0-674df3e525e7",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "2022769e-9062-42c5-873f-e5e292934e2f",
                            Description = "",
                            GainsAccountId = "3ac56558-fa6e-4dbb-a203-0d3e818d3f24",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "a260b16d-e645-44c9-bf19-2b4ca593ccc1",
                            Description = "",
                            GainsAccountId = "002e7ade-0412-4b92-b736-3bd3c20b1c7f",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "67348b58-3deb-4721-aea6-6fc8486c3933",
                            Description = "",
                            GainsAccountId = "ec78f54c-5ec3-47de-b87e-f463ca6e7a60",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "8f542d20-3375-4c38-a63f-b775a68ee57d",
                            Description = "",
                            GainsAccountId = "e07e2bfa-9395-4d2c-8a1f-807cbe2ff361",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "298fb4d2-43f8-44e3-ac5c-3e4293eb386f",
                            Description = "",
                            GainsAccountId = "0f7cc709-5823-42ed-b708-d47ee2add916",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "aafe35a2-ff8d-4bd0-a702-34479e1b0533",
                            Description = "",
                            GainsAccountId = "47769e5f-0e37-4cfa-a53e-0462887e691d",
                            PictureUrl = ""
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("UserHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_handle");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_gains_accounts");

                    b.HasIndex("UserProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_gains_accounts_user_profile_id");

                    b.ToTable("gains_accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cddf167b-e989-4d8b-bd5c-1e6a55aa19fb",
                            DisplayName = "DavrozzGaining",
                            UserHandle = "stije",
                            UserId = "bc15522d-ea20-47d3-954d-4639a8ad63a5",
                            UserProfileId = "5b340191-266e-4aed-98fc-175d938419ae"
                        },
                        new
                        {
                            Id = "b2996ab3-a532-4cd9-8cc0-674df3e525e7",
                            DisplayName = "",
                            UserHandle = "Joyo",
                            UserId = "931c47b5-2378-42a6-8154-5e6a1add3907",
                            UserProfileId = "93991ba1-47f5-4af8-8319-fb181ccbe0ba"
                        },
                        new
                        {
                            Id = "3ac56558-fa6e-4dbb-a203-0d3e818d3f24",
                            DisplayName = "",
                            UserHandle = "BINO",
                            UserId = "cb66ef76-1a61-4ce5-ba87-e125b31ff0a6",
                            UserProfileId = "2022769e-9062-42c5-873f-e5e292934e2f"
                        },
                        new
                        {
                            Id = "002e7ade-0412-4b92-b736-3bd3c20b1c7f",
                            DisplayName = "",
                            UserHandle = "soep",
                            UserId = "4f32b8a2-2753-4f1b-8627-2f774aa5acfe",
                            UserProfileId = "a260b16d-e645-44c9-bf19-2b4ca593ccc1"
                        },
                        new
                        {
                            Id = "ec78f54c-5ec3-47de-b87e-f463ca6e7a60",
                            DisplayName = "",
                            UserHandle = "eef",
                            UserId = "8084614b-10da-4fe8-8a34-e9cb2c6cff38",
                            UserProfileId = "67348b58-3deb-4721-aea6-6fc8486c3933"
                        },
                        new
                        {
                            Id = "e07e2bfa-9395-4d2c-8a1f-807cbe2ff361",
                            DisplayName = "",
                            UserHandle = "jordt",
                            UserId = "c3b64cba-b0ef-44c7-af1e-22624fdb20ff",
                            UserProfileId = "8f542d20-3375-4c38-a63f-b775a68ee57d"
                        },
                        new
                        {
                            Id = "0f7cc709-5823-42ed-b708-d47ee2add916",
                            DisplayName = "",
                            UserHandle = "sanda",
                            UserId = "f67708e4-07de-499b-8167-a668d79de1f9",
                            UserProfileId = "298fb4d2-43f8-44e3-ac5c-3e4293eb386f"
                        },
                        new
                        {
                            Id = "47769e5f-0e37-4cfa-a53e-0462887e691d",
                            DisplayName = "",
                            UserHandle = "naoh",
                            UserId = "699f2dc7-80fd-4492-b384-3353ea3ff215",
                            UserProfileId = "aafe35a2-ff8d-4bd0-a702-34479e1b0533"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("TimeOfRecord")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_of_record");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.Property<string>("WorkoutId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workout_id");

                    b.HasKey("Id")
                        .HasName("pk_measurement");

                    b.HasIndex("UserProfileId")
                        .HasDatabaseName("ix_measurement_user_profile_id");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_measurement_workout_id");

                    b.ToTable("measurement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Measurement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BestMeasurementId")
                        .HasColumnType("text")
                        .HasColumnName("best_measurement_id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_workout");

                    b.HasIndex("BestMeasurementId")
                        .HasDatabaseName("ix_workout_best_measurement_id");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_workout_gains_account_id");

                    b.ToTable("workout", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.LiterWaterMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<double>("Liters")
                        .HasColumnType("double precision")
                        .HasColumnName("liters");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("LiterWaterMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.ProteinMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("ProteinIntake")
                        .HasColumnType("bigint")
                        .HasColumnName("protein_intake");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("ProteinMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.WeightMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint")
                        .HasColumnName("weight");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("WeightMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.GeneralMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("GeneralAchievement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("general_achievement");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("GeneralMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.RepsMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("RepsMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.StrengthMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("weight_unit");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Reps")
                                .HasColumnName("strength_measurement_reps");
                        });

                    b.HasDiscriminator().HasValue("StrengthMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeAndDistanceEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<string>("DistanceUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("distance_unit");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("TimeAndDistanceEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Time")
                                .HasColumnName("time_endurance_measurement_time");
                        });

                    b.HasDiscriminator().HasValue("TimeEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Friends")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friends_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Recipient")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_recipient_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_requester_id");

                    b.Navigation("Recipient");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Metrics")
                        .HasForeignKey("GainsAccountId")
                        .HasConstraintName("fk_metric_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "GainsAccount")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Security.Models.User", "GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_gains_accounts_gains_account_id");

                    b.Navigation("GainsAccount");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", "UserProfile")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gains_accounts_user_profiles_user_profile_id1");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", null)
                        .WithMany("PinnedPBs")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_user_profiles_user_profile_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", null)
                        .WithMany("Measurements")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_workout_workout_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", "PersonalBest")
                        .WithMany()
                        .HasForeignKey("BestMeasurementId")
                        .HasConstraintName("fk_workout_measurement_best_measurement_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Workouts")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_gains_accounts_gains_account_id");

                    b.Navigation("PersonalBest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Navigation("PinnedPBs");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Metrics");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
