// <auto-generated />
using System;
using GainsTracker.CoreAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GainsTracker.CoreAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230702223412_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("FriendHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_handle");

                    b.Property<string>("FriendName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_name");

                    b.Property<DateTime>("FriendsSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("friends_since");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.HasKey("Id")
                        .HasName("pk_friends");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_friends_gains_account_id");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("request_time");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requester_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_friend_requests");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_friend_requests_recipient_id");

                    b.HasIndex("RequesterId")
                        .HasDatabaseName("ix_friend_requests_requester_id");

                    b.ToTable("friend_requests", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("GainsAccountId")
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<DateTime>("LoggingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("logging_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_metric");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_metric_gains_account_id");

                    b.ToTable("metric");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Metric");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("GainsAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_gains_account_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "67e16748-e62f-44ec-8525-f3bd60730c47",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93458379-5d65-42d7-a7d6-70dc1eb4a0a2",
                            Email = "stije@studiostoy.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "60a56bc1-95c7-45f9-ae06-4176efa921a2",
                            LockoutEnabled = false,
                            NormalizedEmail = "STIJE@STUDIOSTOY.NL",
                            NormalizedUserName = "STIJE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJhTY++Q0d/LW61sWRVYIOFuJwEXZFrG6BCq3hBO5NGwWT6+p1EmwcQTgUn6loa6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ba784a3-654b-4c49-bca4-676aad9a6823",
                            TwoFactorEnabled = false,
                            UserName = "stije"
                        },
                        new
                        {
                            Id = "2519eb74-ccb3-4d14-9055-569d7fa36f25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5b413a9-ff2f-458e-921b-6cbf88ba2318",
                            Email = "joy@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "2c79bba1-a6e1-402a-bd20-246a4ffa5b47",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOY@STUDIOSTOY.NL",
                            NormalizedUserName = "JOYO",
                            PasswordHash = "AQAAAAIAAYagAAAAEMOb4lK5ayGll0ZeDGOVIDTIWH0Z7JRldo6zrtD4BdyHeAFQgvRz30eSI00UkARZww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5097f9aa-299a-4318-bcd6-0e53f9d7fc64",
                            TwoFactorEnabled = false,
                            UserName = "Joyo"
                        },
                        new
                        {
                            Id = "21ff9abe-cb37-4a63-a3be-40aea8d8fd7a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d5b1b42-9e89-4e21-acd0-44762d975dbc",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "0bd85f22-6fbc-401e-8dac-ed23ce459d76",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "BINO",
                            PasswordHash = "AQAAAAIAAYagAAAAEIznVI6SLir5a/63ZNK2CNa+ImfNwZdUUiZsPQwyY6gqgp0pLrEUyYyWZA66Sh6vbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "424d0747-4747-4e00-98e1-a024b907ec1d",
                            TwoFactorEnabled = false,
                            UserName = "BINO"
                        },
                        new
                        {
                            Id = "ef745569-8ba4-4108-b689-cd804e55a15d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7c1c170-3727-40e8-b69a-272adf6f199d",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "a2943a09-67f7-48e5-9493-16c71bfbaf7b",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "SOEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEE62U/vZW7u3iwIQMGnmskap+RRI8PUp062Cr/8rmfrnHiFFdxj/NWpL+xheCRyFEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1deef9b-6ae6-4ff0-a7e4-785ab5fd9193",
                            TwoFactorEnabled = false,
                            UserName = "soep"
                        },
                        new
                        {
                            Id = "03b0da2a-70af-48ed-9082-cd4e19d281bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43a93c58-d554-42b7-bb66-47135be533b9",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "d7b07d94-5d17-4f50-93f4-c863cee7e116",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "EEF",
                            PasswordHash = "AQAAAAIAAYagAAAAELMeYUsk/Dhcs3aas//CykNZ3ZazA+7A9GZolomGqtplXpYreBmuY/IL5xN3mSg+uA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b85cd636-d792-4972-8951-901a11a32462",
                            TwoFactorEnabled = false,
                            UserName = "eef"
                        },
                        new
                        {
                            Id = "e6d506fc-1691-4471-8b14-5cc455695255",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f9fe415-e6f6-4faa-9608-f9798a0cc3d2",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "f2aa01d1-1b96-4c4d-99ef-fcd4c4208d31",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "JORDT",
                            PasswordHash = "AQAAAAIAAYagAAAAEIR1AuV6Je8xMmQoSwLEfwoV3Zzy9JpkEKHHKPZQp+D+CFwbd4NibauL1RV6303/2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d99fb239-4fa3-4a29-9ce1-4edb2ce371b4",
                            TwoFactorEnabled = false,
                            UserName = "jordt"
                        },
                        new
                        {
                            Id = "1bc8e283-d64d-4a1e-9152-af6fc308de98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38ac6db5-9a48-4805-87e9-85ebac49f72a",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "dffc4e16-28e7-4e67-889a-fd982fe75248",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "SANDA",
                            PasswordHash = "AQAAAAIAAYagAAAAEAkz+ff/9gp46RBLgTPROgUlCZOfSnofw6tNya/yKpAC5krSuCH8vtb5Y2OIXjmEDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d829106-9301-4404-a71f-85add8d174de",
                            TwoFactorEnabled = false,
                            UserName = "sanda"
                        },
                        new
                        {
                            Id = "225a2c18-9e35-49e7-b6d9-02d05facb51c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d15f5f0-2a21-4397-ae9a-2e704402feba",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "260e0355-f7c5-4b35-bfd3-f085a13200d6",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "NAOH",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8fv7lIbCiryX3rWDS43VdNRSlzV4OVbE0Kl33+U80C8H6IUUa7VLDggCaRor6xhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d4a3874-ce3f-4d0e-8bd6-ec49a6cfa240",
                            TwoFactorEnabled = false,
                            UserName = "naoh"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("picture_url");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.ToTable("user_profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "be4e806f-1493-4982-b84f-2d5c035c0f7d",
                            Description = "",
                            GainsAccountId = "60a56bc1-95c7-45f9-ae06-4176efa921a2",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "7212d4fd-765f-4515-a612-19d72e0ed6f5",
                            Description = "",
                            GainsAccountId = "2c79bba1-a6e1-402a-bd20-246a4ffa5b47",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "4524ad66-78f5-4952-a144-255adda2b35b",
                            Description = "",
                            GainsAccountId = "0bd85f22-6fbc-401e-8dac-ed23ce459d76",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "fbbcfb7b-e6e4-45a3-b483-2ce36bac2e8c",
                            Description = "",
                            GainsAccountId = "a2943a09-67f7-48e5-9493-16c71bfbaf7b",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "b7991944-4729-4ce1-b90d-981516109bd7",
                            Description = "",
                            GainsAccountId = "d7b07d94-5d17-4f50-93f4-c863cee7e116",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "6ac1ba55-3e89-4e92-8889-dca9c22d86b3",
                            Description = "",
                            GainsAccountId = "f2aa01d1-1b96-4c4d-99ef-fcd4c4208d31",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "ca8adf96-377d-42ed-99a5-13b359f14a2c",
                            Description = "",
                            GainsAccountId = "dffc4e16-28e7-4e67-889a-fd982fe75248",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "94993ee3-c1f1-4fdd-83a6-37685075018b",
                            Description = "",
                            GainsAccountId = "260e0355-f7c5-4b35-bfd3-f085a13200d6",
                            PictureUrl = ""
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("UserHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_handle");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_gains_accounts");

                    b.HasIndex("UserProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_gains_accounts_user_profile_id");

                    b.ToTable("gains_accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "60a56bc1-95c7-45f9-ae06-4176efa921a2",
                            DisplayName = "DavrozzGaining",
                            UserHandle = "stije",
                            UserId = "67e16748-e62f-44ec-8525-f3bd60730c47",
                            UserProfileId = "be4e806f-1493-4982-b84f-2d5c035c0f7d"
                        },
                        new
                        {
                            Id = "2c79bba1-a6e1-402a-bd20-246a4ffa5b47",
                            DisplayName = "",
                            UserHandle = "Joyo",
                            UserId = "2519eb74-ccb3-4d14-9055-569d7fa36f25",
                            UserProfileId = "7212d4fd-765f-4515-a612-19d72e0ed6f5"
                        },
                        new
                        {
                            Id = "0bd85f22-6fbc-401e-8dac-ed23ce459d76",
                            DisplayName = "",
                            UserHandle = "BINO",
                            UserId = "21ff9abe-cb37-4a63-a3be-40aea8d8fd7a",
                            UserProfileId = "4524ad66-78f5-4952-a144-255adda2b35b"
                        },
                        new
                        {
                            Id = "a2943a09-67f7-48e5-9493-16c71bfbaf7b",
                            DisplayName = "",
                            UserHandle = "soep",
                            UserId = "ef745569-8ba4-4108-b689-cd804e55a15d",
                            UserProfileId = "fbbcfb7b-e6e4-45a3-b483-2ce36bac2e8c"
                        },
                        new
                        {
                            Id = "d7b07d94-5d17-4f50-93f4-c863cee7e116",
                            DisplayName = "",
                            UserHandle = "eef",
                            UserId = "03b0da2a-70af-48ed-9082-cd4e19d281bd",
                            UserProfileId = "b7991944-4729-4ce1-b90d-981516109bd7"
                        },
                        new
                        {
                            Id = "f2aa01d1-1b96-4c4d-99ef-fcd4c4208d31",
                            DisplayName = "",
                            UserHandle = "jordt",
                            UserId = "e6d506fc-1691-4471-8b14-5cc455695255",
                            UserProfileId = "6ac1ba55-3e89-4e92-8889-dca9c22d86b3"
                        },
                        new
                        {
                            Id = "dffc4e16-28e7-4e67-889a-fd982fe75248",
                            DisplayName = "",
                            UserHandle = "sanda",
                            UserId = "1bc8e283-d64d-4a1e-9152-af6fc308de98",
                            UserProfileId = "ca8adf96-377d-42ed-99a5-13b359f14a2c"
                        },
                        new
                        {
                            Id = "260e0355-f7c5-4b35-bfd3-f085a13200d6",
                            DisplayName = "",
                            UserHandle = "naoh",
                            UserId = "225a2c18-9e35-49e7-b6d9-02d05facb51c",
                            UserProfileId = "94993ee3-c1f1-4fdd-83a6-37685075018b"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("TimeOfRecord")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_of_record");

                    b.Property<string>("UserProfileId")
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.Property<string>("WorkoutId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workout_id");

                    b.HasKey("Id")
                        .HasName("pk_measurement");

                    b.HasIndex("UserProfileId")
                        .HasDatabaseName("ix_measurement_user_profile_id");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_measurement_workout_id");

                    b.ToTable("measurement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Measurement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BestMeasurementId")
                        .HasColumnType("text")
                        .HasColumnName("best_measurement_id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_workout");

                    b.HasIndex("BestMeasurementId")
                        .HasDatabaseName("ix_workout_best_measurement_id");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_workout_gains_account_id");

                    b.ToTable("workout", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.ProteinMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("ProteinIntake")
                        .HasColumnType("bigint")
                        .HasColumnName("protein_intake");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("ProteinMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.WeightMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint")
                        .HasColumnName("weight");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("WeightMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.GeneralMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("GeneralAchievement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("general_achievement");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("GeneralMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.RepsMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("RepsMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.StrengthMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("weight_unit");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Reps")
                                .HasColumnName("strength_measurement_reps");
                        });

                    b.HasDiscriminator().HasValue("StrengthMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeAndDistanceEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<string>("DistanceUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("distance_unit");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("TimeAndDistanceEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Time")
                                .HasColumnName("time_endurance_measurement_time");
                        });

                    b.HasDiscriminator().HasValue("TimeEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Friends")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friends_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Recipient")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_recipient_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_requester_id");

                    b.Navigation("Recipient");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Metrics")
                        .HasForeignKey("GainsAccountId")
                        .HasConstraintName("fk_metric_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "GainsAccount")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Security.Models.User", "GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_gains_accounts_gains_account_id");

                    b.Navigation("GainsAccount");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", "UserProfile")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gains_accounts_user_profiles_user_profile_id1");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", null)
                        .WithMany("PinnedPBs")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("fk_measurement_user_profiles_user_profile_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", null)
                        .WithMany("Measurements")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_workout_workout_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", "PersonalBest")
                        .WithMany()
                        .HasForeignKey("BestMeasurementId")
                        .HasConstraintName("fk_workout_measurement_best_measurement_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Workouts")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_gains_accounts_gains_account_id");

                    b.Navigation("PersonalBest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Navigation("PinnedPBs");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Metrics");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
