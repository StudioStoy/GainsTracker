// <auto-generated />
using System;
using GainsTracker.CoreAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GainsTracker.CoreAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230703125925_AddWaterMetric")]
    partial class AddWaterMetric
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("FriendHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_handle");

                    b.Property<string>("FriendName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("friend_name");

                    b.Property<DateTime>("FriendsSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("friends_since");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.HasKey("Id")
                        .HasName("pk_friends");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_friends_gains_account_id");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("request_time");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requester_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_friend_requests");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("ix_friend_requests_recipient_id");

                    b.HasIndex("RequesterId")
                        .HasDatabaseName("ix_friend_requests_requester_id");

                    b.ToTable("friend_requests", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("GainsAccountId")
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<DateTime>("LoggingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("logging_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_metric");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_metric_gains_account_id");

                    b.ToTable("metric");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Metric");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("GainsAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_gains_account_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9f08ac17-25ab-4e09-bf52-53f11619cabf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e6f51b0-315c-42d3-b90d-6c91af40fe7e",
                            Email = "stije@studiostoy.nl",
                            EmailConfirmed = true,
                            GainsAccountId = "2868c6c5-a06a-4b3d-acf5-c2a571edd0bd",
                            LockoutEnabled = false,
                            NormalizedEmail = "STIJE@STUDIOSTOY.NL",
                            NormalizedUserName = "STIJE",
                            PasswordHash = "AQAAAAIAAYagAAAAEOHTqWBAAgF1kN/3gbtJClBF3eJ70JJNZXKhdphgfTGJTuaA0MfY1LgoUPOMVrPT/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5163335c-1f4a-4cf3-bc94-22dc86bfcfd3",
                            TwoFactorEnabled = false,
                            UserName = "stije"
                        },
                        new
                        {
                            Id = "6aa2b993-f6f5-4066-9fa3-2ef8beb702e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f558cb7-fda5-458a-b170-c43c0a0f3bd3",
                            Email = "joy@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "d54014ea-090e-432f-82ed-d7e78aa2b2af",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOY@STUDIOSTOY.NL",
                            NormalizedUserName = "JOYO",
                            PasswordHash = "AQAAAAIAAYagAAAAELGp/MGrKI1gPq4KcxrPZ0Ytu/37WZBWPmeXHaoSfRf+aTXcua/amNUIgHpstK/g/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f28a3584-bc03-4467-90bf-b2f4a487cd73",
                            TwoFactorEnabled = false,
                            UserName = "Joyo"
                        },
                        new
                        {
                            Id = "437a8c50-2959-4e24-bc1e-3b1712dbf846",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0fb0c4d-e5b9-4767-a06c-c665b269a135",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "241699b2-35bf-46b4-8a31-4d9b44035935",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "BINO",
                            PasswordHash = "AQAAAAIAAYagAAAAELchummlrS9kVqa2jNwoY3TTugF9PH0mVsrVPWQjwEXHD82vgE9Xp4FJ9sBqxTYPxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1dd6fed-6a14-479e-8285-24e51fe8db17",
                            TwoFactorEnabled = false,
                            UserName = "BINO"
                        },
                        new
                        {
                            Id = "189e2b78-a5ab-438d-af6f-3a7632916608",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8defe1e-f0a9-4a6f-a6e7-c4193dbc5687",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "0fc50d77-ef45-4cea-bc0a-bfb8633098c8",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "SOEP",
                            PasswordHash = "AQAAAAIAAYagAAAAEAYvG/01G6DC01uDskv9TtCPKilwbynmX98a3rh6u9OindhOpdWX/Nqy502sdz1nOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d33e0630-6bea-4732-83bf-4c16842d40c2",
                            TwoFactorEnabled = false,
                            UserName = "soep"
                        },
                        new
                        {
                            Id = "03e60fc6-121f-4b97-bcca-3fdfed1a2f35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c25bd3f2-871d-4127-9d7f-ca70ee59d5bc",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "fd2bb47b-5b5e-4cb6-aac4-d426b8731229",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "EEF",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+R9Q+a8HMO2q0/3cAJ8rcPlIUTMlOn2kXFm4ZPlaE9ii/roqKF4ryekvILep8X0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74b41bc3-8e9f-4356-a568-8e9154fc8532",
                            TwoFactorEnabled = false,
                            UserName = "eef"
                        },
                        new
                        {
                            Id = "94791753-f637-47a0-a59c-ec6c10b99601",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "038998bf-9f5a-4f7f-a28e-731507a7ffa5",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "fe4c8bcf-2a4a-44eb-900d-6632f0ddcdac",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "JORDT",
                            PasswordHash = "AQAAAAIAAYagAAAAEOgmVM896BI4pTmbCu3fwTixHXdjQkbeV7CfBumAHZMFOtE12iMVnRFMDk7u1vwXJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4f9946f-a1be-4b28-ad54-1e80dfce5877",
                            TwoFactorEnabled = false,
                            UserName = "jordt"
                        },
                        new
                        {
                            Id = "e37d81fa-7227-4ef4-bd0a-05d8be5941c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "687d3e25-dba4-4d1f-8dee-5fbec7e6b7a3",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "8392dbc3-47db-4377-a36e-8b5208444a51",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "SANDA",
                            PasswordHash = "AQAAAAIAAYagAAAAENZiTWYeM+nEZ/quVa4puOFyenTR2Vf8pfpVLcfOCHXrUr1lLYvChuY9JX8fOc+SPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16b67c7d-fc1f-43a7-8443-a77d3f442e42",
                            TwoFactorEnabled = false,
                            UserName = "sanda"
                        },
                        new
                        {
                            Id = "d0e673e5-292e-4004-b2bd-1ba64ba5e80e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04921017-996b-49fa-aadf-b98d1f1e0bbc",
                            Email = "test@studiostoy.nl",
                            EmailConfirmed = false,
                            GainsAccountId = "0c844c83-2c99-4235-9245-7281d827f93e",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@STUDIOSTOY.NL",
                            NormalizedUserName = "NAOH",
                            PasswordHash = "AQAAAAIAAYagAAAAEKVU0baNYGkFuj0KrWasLFJqFH61mtb1xHrd5SGQ0lWDUrAjNPy6JMDhVbOLJCczxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef246f8a-2536-4654-acb7-3255e5092b37",
                            TwoFactorEnabled = false,
                            UserName = "naoh"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("picture_url");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.ToTable("user_profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "787965bb-11b7-4d08-8aaf-c6060399ea10",
                            Description = "",
                            GainsAccountId = "2868c6c5-a06a-4b3d-acf5-c2a571edd0bd",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "e82b7615-a8bb-493f-b514-96ebd2aa9721",
                            Description = "",
                            GainsAccountId = "d54014ea-090e-432f-82ed-d7e78aa2b2af",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "eae7e4f0-3e4e-45ab-aadf-7779998fa018",
                            Description = "",
                            GainsAccountId = "241699b2-35bf-46b4-8a31-4d9b44035935",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "94f8ec48-86dd-457d-bb5c-83e40d7e39c6",
                            Description = "",
                            GainsAccountId = "0fc50d77-ef45-4cea-bc0a-bfb8633098c8",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "77ccdf99-3537-4a9c-b09c-ab8befa61a50",
                            Description = "",
                            GainsAccountId = "fd2bb47b-5b5e-4cb6-aac4-d426b8731229",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "2166a230-dcd5-461c-9a11-03a86e5d56ad",
                            Description = "",
                            GainsAccountId = "fe4c8bcf-2a4a-44eb-900d-6632f0ddcdac",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "a968d521-e23c-4af2-8a7c-a1d92bbee42d",
                            Description = "",
                            GainsAccountId = "8392dbc3-47db-4377-a36e-8b5208444a51",
                            PictureUrl = ""
                        },
                        new
                        {
                            Id = "276d34a6-b8d7-43d7-8692-54b7f30d1499",
                            Description = "",
                            GainsAccountId = "0c844c83-2c99-4235-9245-7281d827f93e",
                            PictureUrl = ""
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("UserHandle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_handle");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_gains_accounts");

                    b.HasIndex("UserProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_gains_accounts_user_profile_id");

                    b.ToTable("gains_accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2868c6c5-a06a-4b3d-acf5-c2a571edd0bd",
                            DisplayName = "DavrozzGaining",
                            UserHandle = "stije",
                            UserId = "9f08ac17-25ab-4e09-bf52-53f11619cabf",
                            UserProfileId = "787965bb-11b7-4d08-8aaf-c6060399ea10"
                        },
                        new
                        {
                            Id = "d54014ea-090e-432f-82ed-d7e78aa2b2af",
                            DisplayName = "",
                            UserHandle = "Joyo",
                            UserId = "6aa2b993-f6f5-4066-9fa3-2ef8beb702e5",
                            UserProfileId = "e82b7615-a8bb-493f-b514-96ebd2aa9721"
                        },
                        new
                        {
                            Id = "241699b2-35bf-46b4-8a31-4d9b44035935",
                            DisplayName = "",
                            UserHandle = "BINO",
                            UserId = "437a8c50-2959-4e24-bc1e-3b1712dbf846",
                            UserProfileId = "eae7e4f0-3e4e-45ab-aadf-7779998fa018"
                        },
                        new
                        {
                            Id = "0fc50d77-ef45-4cea-bc0a-bfb8633098c8",
                            DisplayName = "",
                            UserHandle = "soep",
                            UserId = "189e2b78-a5ab-438d-af6f-3a7632916608",
                            UserProfileId = "94f8ec48-86dd-457d-bb5c-83e40d7e39c6"
                        },
                        new
                        {
                            Id = "fd2bb47b-5b5e-4cb6-aac4-d426b8731229",
                            DisplayName = "",
                            UserHandle = "eef",
                            UserId = "03e60fc6-121f-4b97-bcca-3fdfed1a2f35",
                            UserProfileId = "77ccdf99-3537-4a9c-b09c-ab8befa61a50"
                        },
                        new
                        {
                            Id = "fe4c8bcf-2a4a-44eb-900d-6632f0ddcdac",
                            DisplayName = "",
                            UserHandle = "jordt",
                            UserId = "94791753-f637-47a0-a59c-ec6c10b99601",
                            UserProfileId = "2166a230-dcd5-461c-9a11-03a86e5d56ad"
                        },
                        new
                        {
                            Id = "8392dbc3-47db-4377-a36e-8b5208444a51",
                            DisplayName = "",
                            UserHandle = "sanda",
                            UserId = "e37d81fa-7227-4ef4-bd0a-05d8be5941c7",
                            UserProfileId = "a968d521-e23c-4af2-8a7c-a1d92bbee42d"
                        },
                        new
                        {
                            Id = "0c844c83-2c99-4235-9245-7281d827f93e",
                            DisplayName = "",
                            UserHandle = "naoh",
                            UserId = "d0e673e5-292e-4004-b2bd-1ba64ba5e80e",
                            UserProfileId = "276d34a6-b8d7-43d7-8692-54b7f30d1499"
                        });
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsInGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_in_goal");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("TimeOfRecord")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_of_record");

                    b.Property<string>("UserProfileId")
                        .HasColumnType("text")
                        .HasColumnName("user_profile_id");

                    b.Property<string>("WorkoutId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workout_id");

                    b.HasKey("Id")
                        .HasName("pk_measurement");

                    b.HasIndex("UserProfileId")
                        .HasDatabaseName("ix_measurement_user_profile_id");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_measurement_workout_id");

                    b.ToTable("measurement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Measurement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BestMeasurementId")
                        .HasColumnType("text")
                        .HasColumnName("best_measurement_id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("GainsAccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gains_account_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_workout");

                    b.HasIndex("BestMeasurementId")
                        .HasDatabaseName("ix_workout_best_measurement_id");

                    b.HasIndex("GainsAccountId")
                        .HasDatabaseName("ix_workout_gains_account_id");

                    b.ToTable("workout", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.LiterWaterMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<double>("Liters")
                        .HasColumnType("double precision")
                        .HasColumnName("liters");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("LiterWaterMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.ProteinMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("ProteinIntake")
                        .HasColumnType("bigint")
                        .HasColumnName("protein_intake");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("ProteinMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.WeightMetric", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint")
                        .HasColumnName("weight");

                    b.ToTable("metric");

                    b.HasDiscriminator().HasValue("WeightMetric");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.GeneralMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("GeneralAchievement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("general_achievement");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("GeneralMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.RepsMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("RepsMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.StrengthMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("weight_unit");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Reps")
                                .HasColumnName("strength_measurement_reps");
                        });

                    b.HasDiscriminator().HasValue("StrengthMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeAndDistanceEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<string>("DistanceUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("distance_unit");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement");

                    b.HasDiscriminator().HasValue("TimeAndDistanceEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.TimeEnduranceMeasurement", b =>
                {
                    b.HasBaseType("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.ToTable("measurement", t =>
                        {
                            t.Property("Time")
                                .HasColumnName("time_endurance_measurement_time");
                        });

                    b.HasDiscriminator().HasValue("TimeEnduranceMeasurement");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.Friend", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Friends")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friends_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Friends.Models.FriendRequest", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Recipient")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_recipient_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "Requester")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_friend_requests_gains_accounts_requester_id");

                    b.Navigation("Recipient");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.HealthMetrics.Models.Metric", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Metrics")
                        .HasForeignKey("GainsAccountId")
                        .HasConstraintName("fk_metric_gains_accounts_gains_account_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Security.Models.User", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "GainsAccount")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Security.Models.User", "GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_users_gains_accounts_gains_account_id");

                    b.Navigation("GainsAccount");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", "UserProfile")
                        .WithOne()
                        .HasForeignKey("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gains_accounts_user_profiles_user_profile_id1");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", null)
                        .WithMany("PinnedPBs")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("fk_measurement_user_profiles_user_profile_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", null)
                        .WithMany("Measurements")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_workout_workout_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.Measurements.Measurement", "PersonalBest")
                        .WithMany()
                        .HasForeignKey("BestMeasurementId")
                        .HasConstraintName("fk_workout_measurement_best_measurement_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", null)
                        .WithMany("Workouts")
                        .HasForeignKey("GainsAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workout_gains_accounts_gains_account_id");

                    b.Navigation("PersonalBest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GainsTracker.CoreAPI.Components.Security.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.UserProfiles.Models.UserProfile", b =>
                {
                    b.Navigation("PinnedPBs");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.GainsAccount", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Metrics");

                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("GainsTracker.CoreAPI.Components.Workouts.Models.Workouts.Workout", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
